#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 18 11:23:33 2018

@author: Stephen
"""

import matplotlib.pyplot as plt
import math
import numpy as np

def cosx(x):
    return (math.cos(x))

def hsize(x):
    h = math.pi / (10.0 * (x ** 2))
    return h

def ord2centdiffapprox1(xval,hval):
    return (  ( cosx((xval + hval)) - (2 * cosx(xval)) + cosx((xval - hval)) ) / hval ** 2 )

def ord2centdiffapprox2(xval, hval):
    a1 = cosx((xval + hval)) - cosx(xval)
    a2 = cosx((xval - hval)) - cosx(xval)
    a3 = a1 + a2
    return a3 / (hval ** 2)
    
def ord2diffcosx(x):
    return -1 * math.cos(x)

def createarrays0to2pi(x):
    xvalues = np.linspace(0, 2 * math.pi, x)
    numpoints = len(xvalues)
    return xvalues, numpoints
    
def calcderivanderror(arrayx, arraysize, h):
    approxvalues = np.zeros(arraysize)
    actualvalues = np.zeros(arraysize)
    relativeerror = np.zeros(arraysize)
    for i in range(arraysize):
        approxvalues[i] = ord2centdiffapprox1(arrayx[i], h)
        actualvalues[i] = ord2diffcosx(arrayx[i])
        relativeerror[i] = abs( ( actualvalues[i] - approxvalues[i] ) / actualvalues[i] )
    return approxvalues, actualvalues, relativeerror
#    plt.plot(arrayx, approxvalues, 'ro')
#    plt.show()
#    plt.plot(arrayx, relativeerror, 'bo')
#    plt.ylim(ymin = 0, ymax = (1.5 * np.amax(relativeerror)))
#    plt.show()
    
def main(x):
    averror = np.zeros(10000)
    hvalues = np.zeros(10000)
    xaxis, numpoints = createarrays0to2pi(x)
    for j in range(1, 10000):
        hvalue = hsize(j) 
        yapprox, yactual, relerror = calcderivanderror(xaxis, numpoints, hvalue)
        averror[j-1] = np.average(relerror)
        hvalues[j-1] = hvalue
    plt.plot(hvalues, averror, 'ro')
    plt.xlim(xmin = 0.0, xmax = 0.0000001)
    plt.grid()
    plt.show()
    

main(50)
    
    

    
    